// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: wheatherservice.proto

package WheatherService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WheatherServiceClient is the client API for WheatherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WheatherServiceClient interface {
	GetCurrentWeather(ctx context.Context, in *CurrentWheatherRequest, opts ...grpc.CallOption) (*CurrentWheatherResponse, error)
	GetWeatherForecast(ctx context.Context, in *ForecastWheatherRequest, opts ...grpc.CallOption) (*ForecastWheatherResponse, error)
	ReportWeatherCondition(ctx context.Context, in *ReportWheatherRequest, opts ...grpc.CallOption) (*ReportWheatherResponse, error)
}

type wheatherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWheatherServiceClient(cc grpc.ClientConnInterface) WheatherServiceClient {
	return &wheatherServiceClient{cc}
}

func (c *wheatherServiceClient) GetCurrentWeather(ctx context.Context, in *CurrentWheatherRequest, opts ...grpc.CallOption) (*CurrentWheatherResponse, error) {
	out := new(CurrentWheatherResponse)
	err := c.cc.Invoke(ctx, "/genproto.WheatherService/GetCurrentWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wheatherServiceClient) GetWeatherForecast(ctx context.Context, in *ForecastWheatherRequest, opts ...grpc.CallOption) (*ForecastWheatherResponse, error) {
	out := new(ForecastWheatherResponse)
	err := c.cc.Invoke(ctx, "/genproto.WheatherService/GetWeatherForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wheatherServiceClient) ReportWeatherCondition(ctx context.Context, in *ReportWheatherRequest, opts ...grpc.CallOption) (*ReportWheatherResponse, error) {
	out := new(ReportWheatherResponse)
	err := c.cc.Invoke(ctx, "/genproto.WheatherService/ReportWeatherCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WheatherServiceServer is the server API for WheatherService service.
// All implementations must embed UnimplementedWheatherServiceServer
// for forward compatibility
type WheatherServiceServer interface {
	GetCurrentWeather(context.Context, *CurrentWheatherRequest) (*CurrentWheatherResponse, error)
	GetWeatherForecast(context.Context, *ForecastWheatherRequest) (*ForecastWheatherResponse, error)
	ReportWeatherCondition(context.Context, *ReportWheatherRequest) (*ReportWheatherResponse, error)
	mustEmbedUnimplementedWheatherServiceServer()
}

// UnimplementedWheatherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWheatherServiceServer struct {
}

func (UnimplementedWheatherServiceServer) GetCurrentWeather(context.Context, *CurrentWheatherRequest) (*CurrentWheatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentWeather not implemented")
}
func (UnimplementedWheatherServiceServer) GetWeatherForecast(context.Context, *ForecastWheatherRequest) (*ForecastWheatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeatherForecast not implemented")
}
func (UnimplementedWheatherServiceServer) ReportWeatherCondition(context.Context, *ReportWheatherRequest) (*ReportWheatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWeatherCondition not implemented")
}
func (UnimplementedWheatherServiceServer) mustEmbedUnimplementedWheatherServiceServer() {}

// UnsafeWheatherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WheatherServiceServer will
// result in compilation errors.
type UnsafeWheatherServiceServer interface {
	mustEmbedUnimplementedWheatherServiceServer()
}

func RegisterWheatherServiceServer(s grpc.ServiceRegistrar, srv WheatherServiceServer) {
	s.RegisterService(&WheatherService_ServiceDesc, srv)
}

func _WheatherService_GetCurrentWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentWheatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WheatherServiceServer).GetCurrentWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.WheatherService/GetCurrentWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WheatherServiceServer).GetCurrentWeather(ctx, req.(*CurrentWheatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WheatherService_GetWeatherForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForecastWheatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WheatherServiceServer).GetWeatherForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.WheatherService/GetWeatherForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WheatherServiceServer).GetWeatherForecast(ctx, req.(*ForecastWheatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WheatherService_ReportWeatherCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportWheatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WheatherServiceServer).ReportWeatherCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.WheatherService/ReportWeatherCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WheatherServiceServer).ReportWeatherCondition(ctx, req.(*ReportWheatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WheatherService_ServiceDesc is the grpc.ServiceDesc for WheatherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WheatherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.WheatherService",
	HandlerType: (*WheatherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentWeather",
			Handler:    _WheatherService_GetCurrentWeather_Handler,
		},
		{
			MethodName: "GetWeatherForecast",
			Handler:    _WheatherService_GetWeatherForecast_Handler,
		},
		{
			MethodName: "ReportWeatherCondition",
			Handler:    _WheatherService_ReportWeatherCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wheatherservice.proto",
}
